// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.2 <0.9.0;

/*
abi.encodePacked()는 거의 모든 자료형을 받아줌.
따라서 다른 자료형과 (contract 안팎으로)통신을 할 때 abi.encodePacked()를 사용함.
궁극적으로 contract끼리 값을 주고 받을 때(통신할 때) abi.encode()의 결과값인 bytes값으로 소통하는 것.(가장 확실하고 명확한 방법)
(기계 입장에서 헷갈리지 않으니까. **즉, 어떤 상황에서도 같은 인풋값이면 같은 결과값을 내는 것이 가장 중요(결정론적))**.)
*/
contract ABI1 {
    /*
    1. a 넣고 결과 비교
    2. getBytes, getabiEncodePacked에 각각 1자리, 2자리, 4자리, 31자리, 32자리, 33자리,
    63자리, 64자리, 65자리 넣고 execution cost 비교해보기
    */
    function getBytes(string memory _s) public pure returns (bytes memory) {
        return bytes(_s);
    }

    function getABIEncode(string memory _s) public pure returns (bytes memory) {
        return abi.encode(_s);
    }

    function getABIEncode2(uint _n, string memory _s) public pure returns (bytes memory) {
        return abi.encode(_n, _s);
    }

    function getABIEncodePacked(string memory _s) public pure returns (bytes memory) {
        return abi.encodePacked(_s);
    }
}

/*
abi.encode() 결과값
string이 input일 경우 데이터 값을 앞부분 부터 채움.

abc
0x
0000000000000000000000000000000000000000000000000000000000000020 // string이 저장된 시작 위치(20 = 32bytes = 64자리 = 1줄)
0000000000000000000000000000000000000000000000000000000000000003 // 글자수
6162630000000000000000000000000000000000000000000000000000000000 // 데이터 값(아스키)

32, abc
0x
0000000000000000000000000000000000000000000000000000000000000020 // 32
0000000000000000000000000000000000000000000000000000000000000040
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3
6162630000000000000000000000000000000000000000000000000000000000 // abc

abcde
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000005
6162636465000000000000000000000000000000000000000000000000000000

8글자
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000008
6162636461626364000000000000000000000000000000000000000000000000

16글자
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000010
6162636461626364616263646162636400000000000000000000000000000000

32글자
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000020
6162636461626364616263646162636461626364616263646162636461626364

33글자
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000021
6162636461626364616263646162636461626364616263646162636461626364
6100000000000000000000000000000000000000000000000000000000000000 // 32bytes만큼 공간 추가
*/

contract ABI2 {
    function getABIEncode(uint[] memory _s) public pure returns (bytes memory) {
        return abi.encode(_s);
    }

    function getABIEncodePacked(uint[] memory _s) public pure returns (bytes memory) {
        return abi.encodePacked(_s);
    }

    function getABIEncode_s(string[] memory _s) public pure returns (bytes memory) {
        return abi.encode(_s);
    }

    /*
    // abi.encodePacked()는 string[], bytes[]를 input으로 못받음

    function getABIEncodePacked_s(string[] memory _s) public pure returns(bytes memory) {
        return abi.encodePacked(_s);
    }
    */
}

/*
uint가 input일 경우 데이터 값을 뒷부분 부터 채움.
abi.encode([1, 2, 3])
0x
0000000000000000000000000000000000000000000000000000000000000020 // array가 저장된 시작 위치(20 = 32bytes = 64자리 = 1줄)
0000000000000000000000000000000000000000000000000000000000000003 // array길이
0000000000000000000000000000000000000000000000000000000000000001
0000000000000000000000000000000000000000000000000000000000000002
0000000000000000000000000000000000000000000000000000000000000003

abi.encodePacked([1, 2, 3])
0x
0000000000000000000000000000000000000000000000000000000000000001
0000000000000000000000000000000000000000000000000000000000000002
0000000000000000000000000000000000000000000000000000000000000003

abi.encode([a, b, c])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3짜리 array입니다
0000000000000000000000000000000000000000000000000000000000000060 // 60, 96
00000000000000000000000000000000000000000000000000000000000000a0 // a0, 160
00000000000000000000000000000000000000000000000000000000000000e0 // e0, 224
0000000000000000000000000000000000000000000000000000000000000001 // 길이 1짜리 요소 옵니다
6100000000000000000000000000000000000000000000000000000000000000 // 그게 a에요
0000000000000000000000000000000000000000000000000000000000000001 // 길이 1짜리 요소 옵니다
6200000000000000000000000000000000000000000000000000000000000000 // 그게 b에요
0000000000000000000000000000000000000000000000000000000000000001 // 길이 1짜리 요소 옵니다
6300000000000000000000000000000000000000000000000000000000000000 // 그게 c에요

abi.encode([ab, cd, ef])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3짜리 array입니다
0000000000000000000000000000000000000000000000000000000000000060 // 60, 96
00000000000000000000000000000000000000000000000000000000000000a0 // a0, 160
00000000000000000000000000000000000000000000000000000000000000e0 // e0, 224
0000000000000000000000000000000000000000000000000000000000000002 // 길이 2짜리 요소 옵니다
6162000000000000000000000000000000000000000000000000000000000000 // 그게 ab에요
0000000000000000000000000000000000000000000000000000000000000002
6364000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000002
6566000000000000000000000000000000000000000000000000000000000000

abi.encode([a, b, c, d, e])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000005 // 길이가 5짜리 array입니다
00000000000000000000000000000000000000000000000000000000000000a0 // a0, 160
00000000000000000000000000000000000000000000000000000000000000e0 // e0, 224
0000000000000000000000000000000000000000000000000000000000000120 // 120, 288
0000000000000000000000000000000000000000000000000000000000000160 // 160, 352
00000000000000000000000000000000000000000000000000000000000001a0 // 1a0, 416
0000000000000000000000000000000000000000000000000000000000000001 // 길이 1짜리 요소 옵니다
6100000000000000000000000000000000000000000000000000000000000000 // 그게 a에요
0000000000000000000000000000000000000000000000000000000000000001
6200000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000001
6300000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000001
6400000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000001
6500000000000000000000000000000000000000000000000000000000000000
*/

contract ABI3 {
    // mapping은 encode가 안됨

    struct A {
        uint a;
        string b;
    }

    struct B {
        uint a;
        string b;
        bool c;
    }

    struct B_2 {
        uint a;
        bool c;
        string b;
    }

    struct B_3 {
        bool c;
        uint a;
        string b;
    }

    struct C {
        bool c;
        uint d;
        uint a;
        string b;
    }

    struct D {
        bool c;
        uint d;
        string a;
        string b;
    }

    struct E {
        uint d;
        string a;
        string b;
        string c;
    }

    struct F {
        uint a;
        uint[] n;
        string b;
        string c;
        string[] d;
    }

    struct G {
        uint a;
        uint[] _n;
        string b;
        string c;
        string[] d;
        bytes1[] e;
    }

    function getABIEncode(A memory _a) public pure returns (bytes memory) {
        return abi.encode(_a);
    }

    function getABIEncode2(B memory _b) public pure returns (bytes memory) {
        return abi.encode(_b);
    }

    function getABIEncode2_2(B_2 memory _b) public pure returns (bytes memory) {
        return abi.encode(_b);
    }

    function getABIEncode2_3(B_3 memory _b) public pure returns (bytes memory) {
        return abi.encode(_b);
    }

    function getABIEncode3(C memory _c) public pure returns (bytes memory) {
        return abi.encode(_c);
    }

    function getABIEncode4(D memory _d) public pure returns (bytes memory) {
        return abi.encode(_d);
    }

    function getABIEncode5(E memory _e) public pure returns (bytes memory) {
        return abi.encode(_e);
    }

    function getABIEncode6(F memory _f) public pure returns (bytes memory) {
        return abi.encode(_f);
    }

    function getABIEncode7(G memory _g) public pure returns (bytes memory) {
        return abi.encode(_g);
    }
}

/*
abi.encode([1, "abc"])
0x
0000000000000000000000000000000000000000000000000000000000000020 // struct 저장된 시작 위치(20 = 32bytes = 64자리 = 1줄) -> 왜 32bytes일까? : uint256이니까 최대숫자(2^256 = 8^32)만큼 미리 자리 확보하는 것.
0000000000000000000000000000000000000000000000000000000000000001 // 1 (숫자니까 그냥 바로 값)
0000000000000000000000000000000000000000000000000000000000000040 // string이 저장된 시작 위치(40 = 32bytes * 2 = 64자리 * 2 = 2줄)
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3짜리 요소 옵니다
6162630000000000000000000000000000000000000000000000000000000000 // abc

abi.encode([1, abcde, true])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000001 // 1
0000000000000000000000000000000000000000000000000000000000000060
0000000000000000000000000000000000000000000000000000000000000001 // true
0000000000000000000000000000000000000000000000000000000000000005 // 길이 5
6162636465000000000000000000000000000000000000000000000000000000 // abcde

abi.encode([1, "abcde", false])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000001 // 1
0000000000000000000000000000000000000000000000000000000000000060
0000000000000000000000000000000000000000000000000000000000000000 // false
0000000000000000000000000000000000000000000000000000000000000005 // 길이 5
6162636465000000000000000000000000000000000000000000000000000000 // abcde

abi.encode([10, true, abc])
0x
0000000000000000000000000000000000000000000000000000000000000020
000000000000000000000000000000000000000000000000000000000000000a // 10
0000000000000000000000000000000000000000000000000000000000000001 // true
0000000000000000000000000000000000000000000000000000000000000060
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3
6162630000000000000000000000000000000000000000000000000000000000 // abc

abi.encode([false, 10, abc])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000000 // false
000000000000000000000000000000000000000000000000000000000000000a // 10
0000000000000000000000000000000000000000000000000000000000000060
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3
6162630000000000000000000000000000000000000000000000000000000000 // abc

abi.encode([false, 16, 32, abc])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000000 // false
0000000000000000000000000000000000000000000000000000000000000010 // 16
0000000000000000000000000000000000000000000000000000000000000020 // 32
0000000000000000000000000000000000000000000000000000000000000080
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3
6162630000000000000000000000000000000000000000000000000000000000 // abc

abi.encode([false, 160, abc, def])
0x
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000000 // false
00000000000000000000000000000000000000000000000000000000000000a0 // 160
0000000000000000000000000000000000000000000000000000000000000080
00000000000000000000000000000000000000000000000000000000000000c0
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3
6162630000000000000000000000000000000000000000000000000000000000 // abc
0000000000000000000000000000000000000000000000000000000000000003 // 길이 3
6465660000000000000000000000000000000000000000000000000000000000 // def

abi.encode([32, ab, cd, ef])
0x
0000000000000000000000000000000000000000000000000000000000000020 // struct 위치
0000000000000000000000000000000000000000000000000000000000000020 // 32
0000000000000000000000000000000000000000000000000000000000000080 // ab 나오는 곳 위치
00000000000000000000000000000000000000000000000000000000000000c0 // cd 나오는 곳 위치
0000000000000000000000000000000000000000000000000000000000000100 // ef 나오는 곳 위치
0000000000000000000000000000000000000000000000000000000000000002
6162000000000000000000000000000000000000000000000000000000000000 // ab
0000000000000000000000000000000000000000000000000000000000000002
6364000000000000000000000000000000000000000000000000000000000000 // cd
0000000000000000000000000000000000000000000000000000000000000002
6566000000000000000000000000000000000000000000000000000000000000 // ef

abi.encode([32, [1, 2, 3], ab, cd, [a, b, c]])
0x
0000000000000000000000000000000000000000000000000000000000000020 // struct 위치(20 = 다음줄에 struct온다)
0000000000000000000000000000000000000000000000000000000000000020 // 32
00000000000000000000000000000000000000000000000000000000000000a0 // [1, 2, 3] : offset
0000000000000000000000000000000000000000000000000000000000000120 // ab : offset
0000000000000000000000000000000000000000000000000000000000000160 // cd : offset
00000000000000000000000000000000000000000000000000000000000001a0 // [a, b, c] : offset
0000000000000000000000000000000000000000000000000000000000000003 // [1, 2, 3]의 길이 3
0000000000000000000000000000000000000000000000000000000000000001 // 1
0000000000000000000000000000000000000000000000000000000000000002 // 2
0000000000000000000000000000000000000000000000000000000000000003 // 3
0000000000000000000000000000000000000000000000000000000000000002 // ab의 길이 2
6162000000000000000000000000000000000000000000000000000000000000 // ab
0000000000000000000000000000000000000000000000000000000000000002 // cd의 길이 2
6364000000000000000000000000000000000000000000000000000000000000 // cd
0000000000000000000000000000000000000000000000000000000000000003 // [a, b, c] 길이 3
0000000000000000000000000000000000000000000000000000000000000060 // a : offset
00000000000000000000000000000000000000000000000000000000000000a0 // b : offset
00000000000000000000000000000000000000000000000000000000000000e0 // c : offset
0000000000000000000000000000000000000000000000000000000000000001 // a의 길이 1
6100000000000000000000000000000000000000000000000000000000000000 // a
0000000000000000000000000000000000000000000000000000000000000001 // b의 길이 1
6200000000000000000000000000000000000000000000000000000000000000 // b
0000000000000000000000000000000000000000000000000000000000000001 // c의 길이 1
6300000000000000000000000000000000000000000000000000000000000000 // c

abi.encode([128, [1, 2, 3, 4, 5], ab, cde, [a, bc, edf], [0x12, 0x34, 0x56, 0x78, 0x9a]])
0x
0000000000000000000000000000000000000000000000000000000000000020 // struct offset
0000000000000000000000000000000000000000000000000000000000000080 // 128
00000000000000000000000000000000000000000000000000000000000000c0 // [1, 2, 3, 4, 5] offset
0000000000000000000000000000000000000000000000000000000000000180 // ab offset
00000000000000000000000000000000000000000000000000000000000001c0 // cde offset
0000000000000000000000000000000000000000000000000000000000000200 // [a, bc, edf] offset
0000000000000000000000000000000000000000000000000000000000000340 // [0x12, 0x34, 0x56, 0x78, 0x9a] offset
0000000000000000000000000000000000000000000000000000000000000005 // [1, 2, 3, 4, 5] 길이 5
0000000000000000000000000000000000000000000000000000000000000001 // 1
0000000000000000000000000000000000000000000000000000000000000002 // 2
0000000000000000000000000000000000000000000000000000000000000003 // 3
0000000000000000000000000000000000000000000000000000000000000004 // 4
0000000000000000000000000000000000000000000000000000000000000005 // 5
0000000000000000000000000000000000000000000000000000000000000002 // ab 길이 2
6162000000000000000000000000000000000000000000000000000000000000 // ab
0000000000000000000000000000000000000000000000000000000000000003 // cde 길이 3
6364650000000000000000000000000000000000000000000000000000000000 // cde
0000000000000000000000000000000000000000000000000000000000000003 // [a, bc, edf] 길이 3
0000000000000000000000000000000000000000000000000000000000000060 // a offset
00000000000000000000000000000000000000000000000000000000000000a0 // bc offset
00000000000000000000000000000000000000000000000000000000000000e0 // edf offset
0000000000000000000000000000000000000000000000000000000000000001 // a 길이 1
6100000000000000000000000000000000000000000000000000000000000000 // a
0000000000000000000000000000000000000000000000000000000000000002 // bc 길이 2
6263000000000000000000000000000000000000000000000000000000000000 // bc
0000000000000000000000000000000000000000000000000000000000000003 // edf 길이 3
6564660000000000000000000000000000000000000000000000000000000000 // edf
0000000000000000000000000000000000000000000000000000000000000005 // [0x12, 0x34, 0x56, 0x78, 0x9a] 길이 5
1200000000000000000000000000000000000000000000000000000000000000 // 0x12
3400000000000000000000000000000000000000000000000000000000000000 // 0x34
5600000000000000000000000000000000000000000000000000000000000000 // 0x56
7800000000000000000000000000000000000000000000000000000000000000 // 0x78
9a00000000000000000000000000000000000000000000000000000000000000 // 0x9a
*/
